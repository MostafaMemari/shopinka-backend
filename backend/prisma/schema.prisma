// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum AttributeType {
  COLOR
  BUTTON
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

enum ProductType {
  SIMPLE
  VARIABLE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum SeoMetaTargetType {
  product
  blog
  category
  tag
}

model User {
  id               Int              @id() @default(autoincrement()) @db.Integer()
  fullName         String?          @map("full_name")
  mobile           String           @unique()
  transactions     Transaction[]
  attributes       Attribute[]
  perviousMobile   String?
  lastMobileChange DateTime?
  isVerifiedMobile Boolean          @default(false)
  role             Role             @default(CUSTOMER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt()
  galleries        Gallery[]
  addresses        Address[]
  products         Product[]
  productVariants  ProductVariant[]
  favorites        Favorite[]
  categories       Category[]
  comments         Comment[]
  orders           Order[]
  blogs            Blog[]
  tags             Tag[]
  shippings        Shipping[]
  shippingInfos    ShippingInfo[]
  seoMeta          SeoMeta[]
  cart             Cart?            @relation("UserCart")
}

model Transaction {
  id            Int               @id @default(autoincrement())
  user          User?             @relation(references: [id], fields: [userId], onDelete: SetNull)
  userId        Int?
  orderId       Int               @unique()
  amount        Int
  invoiceNumber String            @unique() @map("invoice_number")
  status        TransactionStatus @default(PENDING)
  authority     String
  sessionId     String?

  order Order @relation("TransactionOrder", fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Gallery {
  id          Int           @id() @default(autoincrement())
  title       String
  description String?
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  items       GalleryItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
}

model GalleryItem {
  id                  Int              @id() @default(autoincrement())
  galleryId           Int
  gallery             Gallery          @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  title               String
  description         String?
  fileUrl             String
  fileKey             String
  thumbnailUrl        String?
  thumbnailKey        String?
  mimetype            String
  size                Int
  isDeleted           Boolean          @default(false)
  deletedAt           DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt()
  mainImageOf         Product[]        @relation("MainImage")
  mainImageOfVariants ProductVariant[] @relation("VariantMainImage")
  sharedIn            Product[]        @relation("ProductToGalleryItem")
  categories          Category[]
  tags                Tag[]
  seoMeta             SeoMeta[]
  blogs               Blog[]

  @@index([deletedAt])
}

model Address {
  id             Int      @id() @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  province       String
  city           String
  address        String
  postalCode     String?  @unique() @map("postal_code")
  receiverMobile String?  @map("receiver_mobile")
  description    String?
  orders         Order[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
}

model Attribute {
  id          Int              @id() @default(autoincrement())
  name        String
  slug        String           @unique()
  userId      Int?
  user        User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  type        AttributeType
  description String?
  values      AttributeValue[]
  products    Product[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()
}

model AttributeValue {
  id              Int              @id() @default(autoincrement())
  name            String
  slug            String           @unique()
  colorCode       String?          @map("color_code")
  buttonLabel     String?          @map("button_label")
  attributeId     Int?
  productVariants ProductVariant[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt()

  attribute Attribute? @relation(fields: [attributeId], references: [id], onDelete: SetNull)
}

model Product {
  id               Int              @id @default(autoincrement())
  sku              String?          @unique()
  name             String
  mainImageId      Int?
  userId           Int?
  slug             String           @unique()
  description      String?
  shortDescription String?          @map("short_description")
  quantity         Int?
  basePrice        Int?             @map("base_price")
  salePrice        Int?             @map("sale_price")
  status           ProductStatus    @default(PUBLISHED)
  type             ProductType      @default(SIMPLE)
  mainImage        GalleryItem?     @relation("MainImage", fields: [mainImageId], references: [id], onDelete: SetNull)
  galleryImages    GalleryItem[]    @relation("ProductToGalleryItem")
  user             User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  attributes       Attribute[]
  variants         ProductVariant[]
  favorites        Favorite[]
  categories       Category[]
  comments         Comment[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  tags             Tag[]
  width            Int?
  height           Int?
  length           Int?
  weight           Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt()
}

model ProductVariant {
  id               Int              @id @default(autoincrement())
  sku              String?          @unique()
  mainImageId      Int?
  productId        Int
  orderId          Int?
  userId           Int?
  shortDescription String?          @map("short_description")
  quantity         Int?
  basePrice        Int?             @map("base_price")
  salePrice        Int?             @map("sale_price")
  mainImage        GalleryItem?     @relation("VariantMainImage", fields: [mainImageId], references: [id], onDelete: SetNull)
  product          Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  user             User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  attributeValues  AttributeValue[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  width            Int?
  height           Int?
  length           Int?
  weight           Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt()
}

model Favorite {
  id        Int      @id() @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Category {
  id               Int      @id @default(autoincrement())
  name             String
  slug             String   @unique()
  description      String?
  parentId         Int?
  userId           Int?
  thumbnailImageId Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children Category[] @relation("CategoryToCategory")
  user     User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  products Product[]
  blogs    Blog[]

  thumbnailImage GalleryItem? @relation(fields: [thumbnailImageId], references: [id], onDelete: SetNull)
}

model Comment {
  id            Int       @id() @default(autoincrement())
  title         String
  content       String
  isActive      Boolean   @default(false)
  isRecommended Boolean   @default(true)
  rate          Int       @default(5)
  userId        Int
  productId     Int?
  blogId        Int?
  parentId      Int?
  parent        Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentToComment")

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  blog    Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Cart {
  id     Int @id() @default(autoincrement())
  userId Int @unique()

  user  User       @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model CartItem {
  id               Int  @id() @default(autoincrement())
  cartId           Int
  productId        Int? @unique()
  productVariantId Int? @unique()

  cart           Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()
}

model Order {
  id           Int           @id() @default(autoincrement())
  userId       Int?
  addressId    Int?
  shippingId   Int?
  orderNumber  String        @unique()
  quantity     Int
  totalPrice   Int
  status       OrderStatus   @default(PENDING)
  items        OrderItem[]
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  address      Address?      @relation(fields: [addressId], references: [id], onDelete: SetNull)
  transaction  Transaction?  @relation("TransactionOrder")
  shippingInfo ShippingInfo? @relation("ShippingInfoOrder")
  shipping     Shipping?     @relation(fields: [shippingId], references: [id], onDelete: SetNull)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model OrderItem {
  id               Int  @id() @default(autoincrement())
  orderId          Int
  productId        Int?
  productVariantId Int?
  price            Int
  quantity         Int

  product        Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model SeoMeta {
  id         Int               @id @default(autoincrement())
  userId     Int?
  ogImageId  Int?
  targetId   Int
  targetType SeoMetaTargetType

  title         String?
  description   String?
  keywords      String[] @default([])
  canonicalUrl  String?  @map("canonical_url")
  ogTitle       String?  @map("og_title")
  ogDescription String?  @map("og_description")
  robotsTag     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user    User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  ogImage GalleryItem? @relation(fields: [ogImageId], references: [id], onDelete: SetNull)
}

model Blog {
  id          Int        @id() @default(autoincrement())
  userId      Int?
  mainImageId Int?
  slug        String     @unique()
  title       String
  content     String?
  status      BlogStatus @default(PUBLISHED)
  readingTime Int?       @map("reading_time")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()

  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  mainImage  GalleryItem? @relation(fields: [mainImageId], references: [id], onDelete: SetNull)
  comments   Comment[]
  categories Category[]
  tags       Tag[]
}

model Tag {
  id               Int      @id() @default(autoincrement())
  userId           Int?
  thumbnailImageId Int?
  name             String
  slug             String   @unique()
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()

  products       Product[]
  blogs          Blog[]
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  thumbnailImage GalleryItem? @relation(fields: [thumbnailImageId], references: [id], onDelete: SetNull)
}

model Shipping {
  id            Int      @id() @default(autoincrement())
  userId        Int?
  name          String
  price         Int
  estimatedDays Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  orders        Order[]
  shippingInfos ShippingInfo[]
}

model ShippingInfo {
  id           Int    @id() @default(autoincrement())
  shippingId   Int
  orderId      Int    @unique()
  userId       Int?
  trackingCode String @unique()

  shipping Shipping @relation(fields: [shippingId], references: [id], onDelete: Cascade)
  order    Order    @relation("ShippingInfoOrder", fields: [orderId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
}
